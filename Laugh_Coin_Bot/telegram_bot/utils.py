from openai import AsyncOpenAI
import random

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


# –ò–º–ø–æ—Ä—Ç –∫–ª—é—á–∞
from functions.config import set, cryptocurrencies, our_coin

from functions.classification import classify_text_async, classify_function_calling

import telegram_bot.prompts as prompts

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(
    api_key=set.openai_api_key
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async def generate_crypto_message(state: str, coin_name: str) -> str:

    # –ü—Ä–æ–º–ø—Ç, –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∞–∑
    
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
              "role": "system", 
              "content": "–¢—ã ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—á—é—â–∏–π –±–ª–æ–≥–µ—Ä."
            },
            {
              "role": "user", 
              "content": prompt
            }
        ],
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return str(completion.choices[0].message.content)


async def process_api_response(prompt: str) -> str:
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    completion = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
              "role": "system", 
              "content": "–¢—ã ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—á—é—â–∏–π –±–ª–æ–≥–µ—Ä."
            },
            {
              "role": "user", 
              "content": prompt
            }
        ],
    )
    
    return str(completion.choices[0].message.content) 


async def dialogue_process(input_message: str, username: str) -> str:
    
    fun_name, coin = await classify_function_calling(sequence_to_classify=input_message)
    
    if fun_name == "handle_greeting":
        
        prompt = await prompts.gen_prompt_handle_greeting(name=username)
        greeting_answer = await process_api_response(prompt=prompt)
        return greeting_answer
    
    elif fun_name == "explain_bot_capabilities":
        
        prompt = await prompts.gen_prompt_bot_capabilities(name=username)
        bot_capabilities_answer = await process_api_response(prompt=prompt)
        return bot_capabilities_answer
        
    elif fun_name == "generate_crypto_forecast":
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        if coin is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ coin
            # –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            
            cryptocurrencies_add = cryptocurrencies
            
            # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–∏–µ"
            if "–î—Ä—É–≥–∏–µ" not in cryptocurrencies_add:
                cryptocurrencies_add.append("–î—Ä—É–≥–∏–µ")
            
            find_coin = await classify_text_async(sequence_to_classify=coin, candidate_labels=cryptocurrencies_add)
            print("find_coin=", find_coin)
            
            # –ï—Å–ª–∏ find_coin –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤
            if find_coin == "–î—Ä—É–≥–∏–µ":
                return "Not found in database"
            
            if find_coin in cryptocurrencies and find_coin != our_coin:
                state = random.choice(["–ø–æ–Ω–∏–∂–µ–Ω–∏–µ", "–ø–æ–≤—ã—à–µ–Ω–∏–µ"])
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç api –æ —Ü–µ–Ω–µ coin
                
                prompt = await prompts.gen_prompt_crypto_forecast(state=state, coin_name=coin, name=username)
                crypto_forecast_answer = await process_api_response(prompt=prompt)
                return crypto_forecast_answer
                
            elif find_coin == our_coin:
                state = "–ø–æ–≤—ã—à–µ–Ω–∏–µ"
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç api –æ —Ü–µ–Ω–µ coin

                
                prompt = await prompts.gen_prompt_main_crypto_forecast(coin_name=coin, name=username)
                crypto_forecast_answer = await process_api_response(prompt=prompt)
                return crypto_forecast_answer
                
            else:
                # –ö–æ–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                return "Not found in database"
        else:
            print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è coin —Ä–∞–≤–Ω–∞ None.")
    
    elif fun_name == "handle_negative_message":
        
        prompt = await prompts.gen_prompt_negative_message(name=username)
        bot_capabilities_answer = await process_api_response(prompt=prompt)
        return bot_capabilities_answer
    
    elif fun_name == "handle_undefined_message":
        
        base_message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. üòä –ù–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º! üöÄ‚ú® –ê –ø–æ–∫–∞ —É–ª—ã–±–Ω–∏—Ç–µ—Å—å ‚Äî —ç—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ –∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –º—ã—à—Ü—ã –ª–∏—Ü–∞! üí™üòäüåü"
                
        prompt = await prompts.gen_prompt_paraphrased_message(name=username, base_message=base_message)
        text = await process_api_response(prompt=prompt)
        return text
        
    else:
        
        base_message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. üòä –ù–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º! üöÄ‚ú® –ê –ø–æ–∫–∞ —É–ª—ã–±–Ω–∏—Ç–µ—Å—å ‚Äî —ç—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ –∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –º—ã—à—Ü—ã –ª–∏—Ü–∞! üí™üòäüåü"
                
        prompt = await prompts.gen_prompt_paraphrased_message(name=username, base_message=base_message)
        text = await process_api_response(prompt=prompt)
        return text
    
